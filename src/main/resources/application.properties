## Sprint boot actuator
info.app.name=Web API Service Main
info.app.description=Web API Service Main
info.app.version=${API_VERSION:POC V 1.0.5}

app.scan.volume.dbName=${APP_SCAN_VOLUME_DB_NAME:volume_scan}
app.scan.volume.path=${APP_SCAN_VOLUME_PATH:/share/scan}
app.upload.volume.path=${APP_UPLOAD_VOLUME_PATH:/share/upload}
app.scan.service.url=${SCAN_SERVICE_URL:api}
app.scan.stage.number=${SCAN_STAGE_LOG_NUMBER:5}
app.scan.job-queue-name=${SCAN_JOB_QUEUE_NAME:public_default}
app.scan.csf-file-name=${CSF_FILE_NAME:xvsa-xfa-dummy.csf}
app.scan.scan-result-folder-name=${SCAN_RESULT_FOLDER:scan_result}

app.rule.service.url=${RULE_SERVICE_URL:api}
app.notify.service.enabled=${NOTIFY_SERVICE_ENABLE:false}
app.notify.service.url=${NOTIFY_SERVICE_URL:http://127.0.0.1:80/api/xcalscan/result.json}

management.endpoints.web.exposure.include=configprops,env,info,health,metrics,mappings,loggers,prometheus,logfile,httptrace
management.endpoint.health.show-details=when_authorized
management.endpoint.health.roles=ADMIN
management.endpoints.web.cors.allowed-origins=*
management.endpoints.web.cors.allow-credentials=true


logging.level.com.xcal=${LOG_LEVEL:INFO}
logging.level.root=${LEVEL_ROOT:INFO}

#mybatis log level
logging.level.com.xcal.api.mapper=${MYBATIS_LOG_LEVEL:INFO}

logging.file=${APP_LOG_PATH:logs/app.log}
logging.file.max-size=${LOGGING_FILE_MAX_SIZE:10MB}
logging.file.max-history=${LOGGING_FILE_MAX_HISTORY:10}
# Logging pattern for the console
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%X{applicationName},%X{traceId},%X{spanId},%X{traceSampled}] %X{processId} [%thread] --- %logger{36} - %msg%n
# Logging pattern for file
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%X{applicationName},%X{traceId},%X{spanId},%X{traceSampled}] %X{processId} [%thread] --- %logger{36} - %msg%n
logging.config=classpath:logback.xml

server.port=${WEB_SERVER_PORT:8080}

opentracing.jaeger.log-spans=false
opentracing.jaeger.service-name=${JAEGER_SERVICE_NAME:web-api-service-main}
opentracing.jaeger.const-sampler.decision=true
opentracing.jaeger.udp-sender.host=${JAEGER_AGENT_HOST:jaeger-agent}
opentracing.jaeger.udp-sender.port=${JAEGER_AGENT_PORT:6831}
opentracing.jaeger.enabled=${JAEGER_ENABLE:true}
opentracing.spring.web.skip-pattern=/|/api-docs.*|/actuator/.+|/autoconfig|/configprops|/dump|/health|/info|/metrics.*|/mappings|/swagger.*|.*\\.png|.*\\.css|.*\\.js|.*\\.html|/favicon.ico|/hystrix.stream
opentracing.jaeger.enable-b3-propagation=true

spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST:127.0.0.1}:${POSTGRES_PORT:5432}/${POSTGRES_DB}?createDatabaseIfNotExist=true&autoReconnect=true&currentSchema=${POSTGRES_SCHEMA}&ApplicationName=${POSTGRES_APP_NAME:mainApi}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}

spring.jpa.show-sql=${SHOW_SQL:false}
# create, create-drop, update, validate
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.generate-ddl=true
spring.jpa.properties.hibernate.generate_statistics=false
spring.jpa.properties.hibernate.jdbc.batch_size=${JDBC_BATCH_SIZE:500}
spring.jpa.properties.hibernate.order_inserts=true

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jackson.serialization.write-dates-as-timestamps=true
# Redis Config
spring.redis.host=${REDIS_HOST:127.0.0.1}
spring.redis.port=${REDIS_PORT:6379}
spring.redis.timeout=20000
spring.data.redis.repositories.enabled=false

#Set upload file size limit
spring.servlet.multipart.max-file-size=${MULTIPART_MAX_FILE_SIZE:500MB}
spring.servlet.multipart.max-request-size=${MULTIPART_MAX_REQUEST_SIZE:500MB}

app.auth.max-login-retry-no=10
app.auth.token-secret=${WEB_AUTH_TOKEN_SECRET:12345678901234567890123456789012}
app.auth.token-expiration-msec=${WEB_AUTH_TOKEN_EXPIRATION_MSEC:86400000}
app.auth.scan-token-expiration-msec=86400000

app.upload.delete-archive-file=${DELETE_SOURCE_CODE_ARCHIVE:true}
# NONE, SCAN_FILE, ALL
app.file-delete-option=ALL

#The following is the email server default setting.
#the email server setting can be update on the UI email server configuration page and save to database.
#After update the email server setting by UI, the following default setting is covered.
app.mail.protocol=${MAIL_PROTOCOL:smtp}
app.mail.host=${MAIL_HOST:smtpdm.aliyun.com}
app.mail.port=${MAIL_PORT:465}
app.mail.username=${MAIL_USERNAME:no-reply@xcalibyte.io}
app.mail.password=${MAIL_PASSWORD:xxxxxxxxx}
app.mail.starttls=${MAIL_STARTTLS:false}
app.mail.prefix=${MAIL_PREFIX:[Xcalscan]}
app.mail.from=${MAIL_FROM:no-reply@xcalibyte.io}

#how many recent projects will be list in the preset manage page
app.projects.recent.count=8
#this is the url where the issue assign email go to
app.ui-protocol=${UI_PROTOCOL:http}
app.ui-host=${ISSUE_PAGE_URL:127.0.0.1}
app.ui-port=${APIGATEWAY_TCP_PORT:80}

app.jaeger.query-host=${JAEGER_QUERY_HOST:127.0.0.1}
app.jaeger.query-port=${JAEGER_QUERY_PORT:8886}
app.performance.data-save-path=${PERFORMANCE_DATA_SAVE_PATH:volume_diagnostic}
app.performance.prometheus.query-url=${PERFORMANCE_PROMETHEUS_QUERY_URL:http://127.0.0.1:9090}

app.performance.prometheus.query.scan-service-cpu=${SCAN_SERVICE_CPU:sum(rate(container_cpu_usage_seconds_total{name=~".*xcalscan.*scan.*"}[1m])) * 100}
app.performance.prometheus.query.scan-service-mem=${SCAN_SERVICE_MEM:container_memory_rss{name=~".*xcalscan.*_scan.*"} / 1024 / 1024}
app.performance.prometheus.query.web-main-api-cpu=${WEB_MAIN_API_CPU:sum(rate(container_cpu_usage_seconds_total{name=~".*xcalscan.*main.*"}[1m])) * 100}
app.performance.prometheus.query.web-main-api-mem=${WEB_MAIN_API_MEM:container_memory_rss{name=~".*xcalscan.*main.*"} / 1024 / 1024}
app.performance.prometheus.query.database-cpu=${DATABASE_CPU:sum(rate(container_cpu_usage_seconds_total{name=~".*xcalscan.*database.*"}[1m])) * 100}
app.performance.prometheus.query.database-mem=${DATABASE_MEM:container_memory_rss{name=~".*xcalscan.*database.*"} / 1024 / 1024}
app.performance.prometheus.query.xvsa-cpu=${XVSA_CPU:sum(rate(container_cpu_usage_seconds_total{image=~"xcal.xvsa.*"}[1m])) * 100}
app.performance.prometheus.query.xvsa-mem=${XVSA_MEM:avg by (image) (container_memory_rss{image=~"xcal.xvsa.*"} / 1024 / 1024)}
app.performance.prometheus.query.kafka-cpu=${KAFKA_CPU:sum(rate(container_cpu_usage_seconds_total{image=~"xcal.kafka.*"}[1m])) * 100}
app.performance.prometheus.query.kafka-mem=${KAFKA_MEM:container_memory_rss{image=~"xcal.kafka.*"} / 1024 / 1024}
app.performance.prometheus.query.jaeger-cpu=${JAEGER_CPU:sum(rate(container_cpu_usage_seconds_total{image=~"xcal.jaeger-agent.*"}[1m])) * 100}
app.performance.prometheus.query.jaeger-mem=${JAEGER_MEM:container_memory_rss{image=~"xcal.jaeger-agent.*"} / 1024 / 1024}

scan.fail.send.email.list=${SCAN_FAIL_SEND_EMAIL_LIST:no-reply@xcalibyte.io}
scan.archive-result=${SCAN_ARCHIVE_RESULT:false}

spring.jackson.deserialization.fail-on-unknown-properties=false

#file service setting
preprocess.data.bucket.name=${PREPROCESS_DATA_BUCKET_NAME:preprocess-data}

housekeep.temp-file.fixed-delay.msec=600000
housekeep.temp-file.initial-delay.msec=300000
housekeep.temp-file.retain-period.max.msec=43200000
housekeep.expired-file.schedule.cron=${HOUSEKEEP_CRON:0 0 2 * * ?}
housekeep.scan-result-files=${HOUSEKEEP_SCAN_FILES:<scan_task_id>.start.log;fileinfo.json;scan_task.log;status-sse.txt;scm_diff.txt;.scan_log/VTXTDIFF.log;.scan_log/convert.log;.scan_log/scan.log;.scan_log/scan_failed_list;source_files.json}

spring.kafka.bootstrap-servers=${KAFKA_ADVERTISED_HOST_NAME:kafka}:${KAFKA_TCP_PORT:9092}

enable-csv-scan-result=${ENABLE_CSV_SCAN_RESULT:true}

recovery-policy.path=${RECOVERY_POLICY_PATH:/share/scan/retryPolicy.json}

execution.mode=${EXECUTION_MODE:RELEASE}

scan-task-log-file-name=${SCAN_TASK_LOG_FILE_NAME:scan_task.log}

search-value-delimiter=${SEARCH_VAL_DELIMITER:;}